{
  "name": "POC MTS",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "4999f552-dbe4-46cb-9df4-f9d9e12e8ebc",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -2224,
        592
      ],
      "id": "81500367-8ad7-465f-9095-c7789f6ebb63",
      "name": "Webhook",
      "webhookId": "4999f552-dbe4-46cb-9df4-f9d9e12e8ebc"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "92268db6-0ff2-443d-a121-bd9a83d9e021",
              "leftValue": "={{ $json.unidad }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "98fb7b40-91fe-479e-950b-121e093b3d30",
              "leftValue": "={{ $json.cliente }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "45bd2bcb-5625-4474-9cf3-8b058ebf2583",
              "leftValue": "={{ $json.telefono }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "dd4e1c5f-46e5-4ede-965a-7d46c6e3c2ff",
              "leftValue": "={{ $json.email }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "34787c5b-6ac2-4002-bcb9-e578d95e4160",
              "leftValue": "={{ $json.categoria }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "4344251d-451b-4363-86c5-12e1e5f0bef0",
              "leftValue": "={{ $json.descripcion }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -896,
        576
      ],
      "id": "931ef454-956d-49df-beaf-d8c0262e1280",
      "name": "If",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "output": "fields",
        "fields": [
          "body",
          "bodyPreview",
          "sender",
          "from",
          "subject",
          "toRecipients",
          "ccRecipients",
          "conversationId"
        ],
        "filtersUI": {
          "values": {
            "filters": {
              "foldersToInclude": [
                "AQMkADAwATM0MDAAMi05OQBkZi02MmFmLTAwAi0wMAoALgAAA40xU_iMNvZKuqh-ve7uAHjJAQDGlg6x6xu7T4lOIzaVKtSVAAACcWoAAAA="
              ]
            }
          }
        },
        "options": {
          "downloadAttachments": true
        }
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -2016,
        592
      ],
      "id": "65325de7-1a5d-42d5-821c-83cd453c9c25",
      "name": "Captura Correos",
      "webhookId": "86874190-ef38-4f2a-bf40-561f30e6e739",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "WAIfe7tdPPM2xgWn",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "operation": "move",
        "messageId": {
          "__rl": true,
          "value": "={{ $('Captura Correos').item.json.id }}",
          "mode": "id"
        },
        "folderId": {
          "__rl": true,
          "value": "AQMkADAwATM0MDAAMi05OQBkZi02MmFmLTAwAi0wMAoALgAAA40xU_iMNvZKuqh-ve7uAHjJAQDGlg6x6xu7T4lOIzaVKtSVAAACcXYAAAA=",
          "mode": "list",
          "cachedResultName": "DESCARTADOS",
          "cachedResultUrl": "https://outlook.office365.com/mail/AQMkADAwATM0MDAAMi05OQBkZi02MmFmLTAwAi0wMAoALgAAA40xU_iMNvZKuqh%2Fve7uAHjJAQDGlg6x6xu7T4lOIzaVKtSVAAACcXYAAAA%3D"
        }
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -672,
        704
      ],
      "id": "6489d70d-826f-4bd3-b919-7cb012b5c12d",
      "name": "Move a message",
      "webhookId": "f3b37618-a670-464b-8d5e-0b3d576c1db1",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "WAIfe7tdPPM2xgWn",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "operation": "move",
        "messageId": {
          "__rl": true,
          "value": "={{ $('Captura Correos').item.json.id }}",
          "mode": "id"
        },
        "folderId": {
          "__rl": true,
          "value": "AQMkADAwATM0MDAAMi05OQBkZi02MmFmLTAwAi0wMAoALgAAA40xU_iMNvZKuqh-ve7uAHjJAQDGlg6x6xu7T4lOIzaVKtSVAAACcW4AAAA=",
          "mode": "list",
          "cachedResultName": "PROCESADOS",
          "cachedResultUrl": "https://outlook.office365.com/mail/AQMkADAwATM0MDAAMi05OQBkZi02MmFmLTAwAi0wMAoALgAAA40xU_iMNvZKuqh%2Fve7uAHjJAQDGlg6x6xu7T4lOIzaVKtSVAAACcW4AAAA%3D"
        }
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -416,
        528
      ],
      "id": "7c4723e1-be86-411f-8e89-48126dda10d4",
      "name": "Move a message1",
      "webhookId": "f353688b-f188-4a47-9bfe-9d73ae1e189c",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "WAIfe7tdPPM2xgWn",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Trae el HTML del correo (todo el hilo)\nlet html = $json.body?.content || '';\n\n// 1️⃣ Elimina todo el HTML dejando solo texto visible\nlet text = html\n  .replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, '') // estilos\n  .replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, '') // scripts\n  .replace(/<!--.*?-->/gs, '') // comentarios\n  .replace(/<\\/(div|p|br|tr|li|td|h[1-6])>/gi, '\\n') // saltos donde corresponde\n  .replace(/<[^>]+>/g, '') // resto de etiquetas\n  .replace(/&nbsp;/gi, ' ')\n  .replace(/&amp;/gi, '&')\n  .replace(/&quot;/gi, '\"')\n  .replace(/&lt;/gi, '<')\n  .replace(/&gt;/gi, '>')\n  .replace(/\\s{2,}/g, ' ')\n  .replace(/\\n{2,}/g, '\\n')\n  .trim();\n\n// 2️⃣ Opcional: si querés sólo el texto más reciente (sin historial previo)\nconst cortes = text.split(/De:|From:/i);\nif (cortes.length > 1) {\n  // ✅ Para conservar TODO el hilo, dejamos text completo\n  // ❌ Si querés solo el más reciente, usa:\n  // text = cortes[0].trim();\n}\n\n// 3️⃣ Devolver texto limpio\nreturn [{\n  json: {\n    asunto: $json.subject,\n    remitente: $json.from,\n    cuerpo_completo: text\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1920,
        736
      ],
      "id": "39b0234d-7bfe-4a13-a47c-299835deca29",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Trae el HTML del correo (todo el hilo)\nlet html = $json.body?.content || '';\n\n// 1️⃣ Elimina todo el HTML dejando solo texto visible\nlet text = html\n  .replace(/<style[^>]*>[\\s\\S]*?<\\/style>/gi, '') // estilos\n  .replace(/<script[^>]*>[\\s\\S]*?<\\/script>/gi, '') // scripts\n  .replace(/<!--.*?-->/gs, '') // comentarios\n  .replace(/<\\/(div|p|br|tr|li|td|h[1-6])>/gi, '\\n') // saltos donde corresponde\n  .replace(/<[^>]+>/g, '') // resto de etiquetas\n  .replace(/&nbsp;/gi, ' ')\n  .replace(/&amp;/gi, '&')\n  .replace(/&quot;/gi, '\"')\n  .replace(/&lt;/gi, '<')\n  .replace(/&gt;/gi, '>')\n  .replace(/\\s{2,}/g, ' ')\n  .replace(/\\n{2,}/g, '\\n')\n  .trim();\n\n// 2️⃣ Opcional: si querés sólo el texto más reciente (sin historial previo)\nconst cortes = text.split(/De:|From:/i);\nif (cortes.length > 1) {\n  // ✅ Para conservar TODO el hilo, dejamos text completo\n  // ❌ Si querés solo el más reciente, usa:\n  // text = cortes[0].trim();\n}\n\n// 3️⃣ Devolver texto limpio\nreturn {\n  json: {\n    asunto: $json.subject,\n    remitente: $json.from,\n    cuerpo_completo: text\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1776,
        592
      ],
      "id": "bff6052f-14ca-4382-ba70-7702bffd5f60",
      "name": "Organización Info"
    },
    {
      "parameters": {
        "resource": "document",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "text": "=Eres un asistente experto en clasificación y extracción de datos de correos empresariales para MTS.\n\nTu tarea es analizar el texto completo de un correo recibido (incluyendo su asunto, cuerpo y firma)\ny devolver los siguientes campos en formato JSON válido:\n\n{\n  \"unidad\": \"\",\n  \"cliente\": \"\",\n  \"telefono\": \"\",\n  \"email\": \"\",\n  \"categoria\": \"\",\n  \"descripcion\": \"\"\n}\n\n### INSTRUCCIONES DE EXTRACCIÓN:\n- **unidad**: el nombre del edificio, sede o instalación (ej: “Carvajal Central”).\n- **cliente**: el nombre de la empresa remitente o el cliente principal.\n- **telefono**: si hay número de teléfono en la firma o el cuerpo del correo.\n- **email**: si hay un correo en la firma o encabezado.\n- **categoria**:\n    - Usa **\"Seguridad - Ingreso\"** si el correo menciona ingreso, acceso, registro, entrada, visitas o personal que va a ingresar.\n    - Usa **\"Mantenimiento\"** si habla de revisiones técnicas, mantenimiento, soporte o reparaciones.\n    - Usa **\"Mejora\"** si se refiere a ampliaciones, mejoras, optimizaciones o actualizaciones de infraestructura.\n    - Si no encaja, usa **\"Otro\"**.\n- **descripcion**: redacta el resumen del requerimiento en lenguaje natural, si es ingreso los datos que hayan de las personas.\n\nDebes validar si es como tal una solicitud y devolver false si no es o true si identificas que están solicitando algo\n\n### CONDICIONES:\n- Si un campo no aparece, déjalo vacío (\"\").\n- No puedes incluir MTS como cliente.\n- No inventes datos ni incluyas texto adicional fuera del JSON.\n- Analiza el contexto del mensaje antes de clasificar la categoría.\n- Si hay varias categorías posibles, elige la más representativa según el propósito del correo.\n-Debes validar si es como tal una solicitud y devolver false si no es o true si identificas que están solicitando algo.\n\nEjemplo de salida:\n{\n  \"unidad\": \"Carvajal Central\",\n  \"cliente\": \"Carvajal\",\n  \"telefono\": \"3104567890\",\n  \"email\": \"juan.perez@carvajal.com\",\n  \"categoria\": \"Seguridad - Ingreso\",\n  \"descripcion\": \"Solicitud de ingreso de personal para labores en el edificio Carvajal Central.\"\n  \"solicitud:\": \"false\"\n}\n\n---  \nCorreo a analizar:\nAsunto: {{ $json.asunto }}\ncuerpo del correo: {{ $json.cuerpo_completo }}\n\n\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -1248,
        576
      ],
      "id": "f24fa0a3-2773-403e-bd49-0ac74f8ab940",
      "name": "IA Extracción Texto",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "googlePalmApi": {
          "id": "c6L8r4wOhl65h8t1",
          "name": "Google Gemini(PaLM) SGTECH"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Aseguramos que trabajamos con el objeto correcto\nconst data = Array.isArray($json) ? $json[0] : $json;\n\n// 1️⃣ Extraemos el texto bruto de la respuesta de IA\nconst raw = data?.content?.parts?.[0]?.text || '';\n\n// 2️⃣ Limpiamos el texto\nlet cleaned = raw\n  .replace(/```json/gi, '')\n  .replace(/```/g, '')\n  .trim();\n\n// 3️⃣ Intentamos convertir a JSON\nlet parsed;\ntry {\n  parsed = JSON.parse(cleaned);\n} catch (e) {\n  const match = cleaned.match(/\\{[\\s\\S]*\\}/);\n  parsed = match ? JSON.parse(match[0]) : {};\n}\n\n// 4️⃣ Devolvemos todo estructurado\nreturn ({\n  json: {\n    unidad: parsed.unidad || '',\n    cliente: parsed.cliente || '',\n    telefono: parsed.telefono || '',\n    email: parsed.email || '',\n    categoria: parsed.categoria || '',\n    descripcion: parsed.descripcion || '',\n    solicitud: parsed.solicitud ?? '',\n    raw_response: cleaned\n  }\n});\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1088,
        576
      ],
      "id": "ed37c4c1-2d49-43a1-a217-3e2b97b9cf7a",
      "name": "Transf Info"
    },
    {
      "parameters": {
        "dataTableId": {
          "__rl": true,
          "value": "8ChPoll3UhV9yWuv",
          "mode": "list",
          "cachedResultName": "Requerimientos",
          "cachedResultUrl": "/projects/eg4gYJzG3qBcsh6t/datatables/8ChPoll3UhV9yWuv"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "solicitud": false
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "unidad",
              "displayName": "unidad",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "cliente",
              "displayName": "cliente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "telefono",
              "displayName": "telefono",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "categoria",
              "displayName": "categoria",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "descripcion",
              "displayName": "descripcion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "solicitud",
              "displayName": "solicitud",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "raw_response",
              "displayName": "raw_response",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -656,
        528
      ],
      "id": "3c6f0c1c-7ccc-4673-82f0-dfb0acb27d38",
      "name": "Insert row"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "Terminado",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -208,
        528
      ],
      "id": "46949091-2d7e-47d3-8f62-4f264b4d1b88",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "batchSize": 2,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1552,
        592
      ],
      "id": "8d0e4af9-6338-440d-8041-3b39921b4a6f",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        -1392,
        672
      ],
      "id": "f940f8eb-3992-42d0-949d-5d6331ac5862"
    },
    {
      "parameters": {
        "resource": "chatMessage",
        "operation": "sendAndWait",
        "chatId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftTeams",
      "typeVersion": 2,
      "position": [
        -192,
        800
      ],
      "id": "bd1efa21-e227-42c8-a62d-0cabde9cb872",
      "name": "Send message and wait for response",
      "webhookId": "d502fac7-609d-4da2-bbe5-6a76f412fb19",
      "credentials": {
        "microsoftTeamsOAuth2Api": {
          "id": "4voBjDcF04GLsCDX",
          "name": "Microsoft Teams account"
        }
      }
    },
    {
      "parameters": {
        "operation": "move",
        "messageId": {
          "__rl": true,
          "value": "={{$json.messageId}}",
          "mode": "id"
        },
        "folderId": {
          "__rl": true,
          "value": "AQMkADAwATM0MDAAMi05OQBkZi02MmFmLTAwAi0wMAoALgAAA40xU_iMNvZKuqh-ve7uAHjJAQDGlg6x6xu7T4lOIzaVKtSVAAACcW4AAAA=",
          "mode": "list",
          "cachedResultName": "PROCESADOS",
          "cachedResultUrl": "https://outlook.office365.com/mail/AQMkADAwATM0MDAAMi05OQBkZi02MmFmLTAwAi0wMAoALgAAA40xU_iMNvZKuqh%2Fve7uAHjJAQDGlg6x6xu7T4lOIzaVKtSVAAACcW4AAAA%3D"
        }
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -1360,
        384
      ],
      "id": "10044378-f1ce-4639-aa29-ed01a3f2bc76",
      "name": "Move a message2",
      "webhookId": "f353688b-f188-4a47-9bfe-9d73ae1e189c",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "WAIfe7tdPPM2xgWn",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -624,
        208
      ],
      "id": "7bc55cd2-cdbb-4a74-8f51-e16f4247d1cc",
      "name": "Merge"
    },
    {
      "parameters": {
        "functionCode": "const triggerItems = $('Captura Correos').all();\nconst out = [];\n\nfor (const item of triggerItems) {\n  for (const [propName, bin] of Object.entries(item.binary || {})) {\n    const ext = (bin.fileExtension || '').toLowerCase();\n    const mime = (bin.mimeType || '').toLowerCase();\n\n    // Detectar solo PDFs o imágenes JPG/JPEG\n    const isPDF = ext === 'pdf' || mime.includes('application/pdf');\n    const isImage =\n      ['jpg', 'jpeg'].includes(ext) || mime.includes('image/jpeg');\n\n    if (!isPDF && !isImage) continue; // Saltar archivos que no sean PDF ni JPG/JPEG\n\n    // Obtener buffer del binario\n    const buf = bin.data\n      ? Buffer.from(bin.data, 'base64')\n      : await this.helpers.getBinaryDataBuffer('Captura Correos', 0, propName);\n\n    const fileSize = buf.length;\n    const requiresOCR = fileSize > 1000000; // Heurística por tamaño > 1MB\n\n    // Preparar binario para el siguiente nodo\n    const prepared = await this.helpers.prepareBinaryData(\n      buf,\n      bin.fileName || `archivo.${ext || (isPDF ? 'pdf' : 'jpg')}`,\n      bin.mimeType || (isPDF ? 'application/pdf' : 'image/jpeg')\n    );\n\n    // Agregar salida estructurada\n    out.push({\n      json: {\n        messageId: item.json.id,\n        fileName: bin.fileName || `sin_nombre.${ext || (isPDF ? 'pdf' : 'jpg')}`,\n        fileExtension: ext || (isPDF ? 'pdf' : 'jpg'),\n        mimeType: mime || (isPDF ? 'application/pdf' : 'image/jpeg'),\n        fileSizeBytes: fileSize,\n        fileSizeKB: Math.round(fileSize / 1024),\n        fileType: isPDF ? 'pdf' : 'image',\n        requiresOCR: requiresOCR,\n        detectionMethod: 'byExtensionAndMimeType',\n        detectionConfidence: isPDF || isImage ? 'high' : 'low',\n      },\n      binary: { data: prepared },\n    });\n  }\n}\n\nreturn out;\n"
      },
      "id": "95bfcba6-74b4-49b2-a479-3a5148d721e2",
      "name": "Conv. Binario",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -992,
        288
      ]
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "text": "Eres un asistente experto en extracción de información estructurada de órdenes de compra de la empresa farmacéutica proveedora ADIUM.\n\nRecibirás el texto limpio de un documento PDF de orden de compra.\n\n### Instrucciones:\n1. Devuelve ÚNICAMENTE un objeto JSON válido, sin comentarios, sin explicaciones y sin backticks.\n2. Si algún campo no existe en el documento, ponlo vacío \"\" o null (no inventes datos).\n3. Mantén los valores numéricos tal como aparecen en el documento, sin símbolos de moneda (ejemplo: \"8,869,509.00\").\n4. Los ítems de productos deben estar en un array, aunque solo haya un producto.\n5. Si la presentación no está clara, intenta inferirla de la descripción; si no existe, déjala vacía \"\".\n6. Respeta los nombres de campo exactamente como se listan abajo.\n\n### Estructura JSON a devolver:\n{\n  \"orden_compra\": {\n    \"numero\": \"\",\n    \"fecha_orden\": \"\",\n    \"fecha_entrega\": \"\",\n    \"forma_pago\": \"\",\n    \"plazo_pago\": \"\",\n    \"nombre_empresa\": \"\",\n    \"direccion_cliente\": \"\",\n    \"ciudad_comprador\": \"\",\n    \"nit_comprador\": \"\"\n  },\n  \"items\": [\n    {\n      \"codigo\": \"\",\n      \"descripcion\": \"\",\n      \"presentacion\": \"\",\n      \"cantidad\": \"\",\n      \"valor_unitario\": \"\",\n      \"valor_total\": \"\"\n    }\n  ],\n  \"totales\": {\n    \"subtotal\": \"\",\n    \"impuesto\": \"\",\n    \"descuento\": \"\",\n    \"total\": \"\",\n    \"total_letras\": \"\"\n  }\n}\n\n\n",
        "inputType": "binary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -832,
        288
      ],
      "id": "d5f41b80-49d1-419f-96c0-504287e8939b",
      "name": "Analyze 2.5 flash",
      "credentials": {
        "googlePalmApi": {
          "id": "c6L8r4wOhl65h8t1",
          "name": "Google Gemini(PaLM) SGTECH"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "text": "Eres un asistente experto en extracción de información estructurada de órdenes de compra emitidas por la empresa farmacéutica proveedora ADIUM.\n\nRecibirás un documento que puede estar en formato PDF o imagen (fotografía o captura). \nTu tarea es **analizar tanto el contenido visual como el texto** del documento para identificar toda la información relevante, \nsin omitir ningún campo aunque el texto sea pequeño, esté en color distinto o aparezca en bordes o sellos.\n\n### Instrucciones:\n1. Analiza visualmente el documento (layout, tablas, totales) y también su texto.\n2. Devuelve ÚNICAMENTE un objeto JSON válido, sin comentarios, sin explicaciones y sin backticks.\n3. Si algún campo no existe en el documento, ponlo vacío \"\" o null (no inventes datos).\n4. Mantén los valores numéricos tal como aparecen en el documento, sin símbolos de moneda (ejemplo: \"8,869,509.00\").\n5. Los ítems de productos deben estar en un array, aunque solo haya un producto.\n6. Si la presentación no está clara, intenta inferirla de la descripción; no confundirla con nombre comercial.\n7. Respeta los nombres de campo exactamente como se listan abajo.\n8. **Importante:** ADIUM es siempre el **proveedor**, nunca el cliente.  \n   - El campo `\"nombre_empresa\"` y los datos de cliente deben corresponder al **comprador o cliente de ADIUM**, no a ADIUM.\n9. Devuelve exclusivamente el JSON, sin texto adicional ni explicaciones antes o después.\n\n### Estructura JSON a devolver:\n{\n  \"orden_compra\": {\n    \"numero\": \"\",\n    \"fecha_orden\": \"\",\n    \"fecha_entrega\": \"\",\n    \"forma_pago\": \"\",\n    \"plazo_pago\": \"\",\n    \"nombre_empresa\": \"\",\n    \"direccion_cliente\": \"\",\n    \"ciudad_comprador\": \"\",\n    \"nit_comprador\": \"\"\n  },\n  \"items\": [\n",
        "inputType": "binary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -1200,
        208
      ],
      "id": "48f0fe59-7cd2-4355-bc14-bdace4e76c52",
      "name": "Extrae info OC",
      "retryOnFail": true,
      "waitBetweenTries": 3000,
      "credentials": {
        "googlePalmApi": {
          "id": "c6L8r4wOhl65h8t1",
          "name": "Google Gemini(PaLM) SGTECH"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        80,
        224
      ],
      "id": "4beca251-e982-4633-bd5b-58a6e595edc9",
      "name": "Agrupa Data"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nlet procesados = 0;\nlet detalles = 0;\n\nfor (const item of items) {\n  const row = item.json;\n  \n  // Detectar encabezado\n  if (row[\"NOMBRE CLIENTE\"]) {\n    procesados++;\n  }\n  \n  // Detectar detalle (ajusta según tus columnas reales de productos)\n  if (row[\"CODIGO\"] || row[\"DESCRIPCION\"]) {\n    detalles++;\n  }\n}\n\nreturn {\n  json: {\n    status: \"OK\",\n    ordenesProcesadas: procesados,\n    itemsProcesados: detalles,\n    timestamp: new Date().toISOString()\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        224
      ],
      "id": "7874d5e9-7581-455e-a900-e93f6906d8f3",
      "name": "Organiza salida"
    },
    {
      "parameters": {
        "functionCode": "const triggerItems = $('Captura Correos').all();\nconst out = [];\n\nfor (const item of triggerItems) {\n  for (const [propName, bin] of Object.entries(item.binary || {})) {\n    const ext = (bin.fileExtension || '').toLowerCase();\n    const mime = (bin.mimeType || '').toLowerCase();\n\n    // Detectar solo PDFs o imágenes JPG/JPEG\n    const isPDF = ext === 'pdf' || mime.includes('application/pdf');\n    const isImage =\n      ['jpg', 'jpeg'].includes(ext) || mime.includes('image/jpeg');\n\n    if (!isPDF && !isImage) continue; // Saltar archivos que no sean PDF ni JPG/JPEG\n\n    // Obtener buffer del binario\n    const buf = bin.data\n      ? Buffer.from(bin.data, 'base64')\n      : await this.helpers.getBinaryDataBuffer('Captura Correos', 0, propName);\n\n    const fileSize = buf.length;\n    const requiresOCR = fileSize > 1000000; // Heurística por tamaño > 1MB\n\n    // Preparar binario para el siguiente nodo\n    const prepared = await this.helpers.prepareBinaryData(\n      buf,\n      bin.fileName || `archivo.${ext || (isPDF ? 'pdf' : 'jpg')}`,\n      bin.mimeType || (isPDF ? 'application/pdf' : 'image/jpeg')\n    );\n\n    // Agregar salida estructurada\n    out.push({\n      json: {\n        messageId: item.json.id,\n        fileName: bin.fileName || `sin_nombre.${ext || (isPDF ? 'pdf' : 'jpg')}`,\n        fileExtension: ext || (isPDF ? 'pdf' : 'jpg'),\n        mimeType: mime || (isPDF ? 'application/pdf' : 'image/jpeg'),\n        fileSizeBytes: fileSize,\n        fileSizeKB: Math.round(fileSize / 1024),\n        fileType: isPDF ? 'pdf' : 'image',\n        requiresOCR: requiresOCR,\n        detectionMethod: 'byExtensionAndMimeType',\n        detectionConfidence: isPDF || isImage ? 'high' : 'low',\n      },\n      binary: { data: prepared },\n    });\n  }\n}\n\nreturn out;\n"
      },
      "id": "ffe90600-5f4d-41ca-a0e9-b3735a22cef9",
      "name": "Conv. Binario1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1360,
        208
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1M1esCkbiCX780P_QnYXeH0z2wscqEMrZHssyquCmN6w",
          "mode": "list",
          "cachedResultName": "RESULTADOS_EXTRACCION",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1M1esCkbiCX780P_QnYXeH0z2wscqEMrZHssyquCmN6w/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1781574660,
          "mode": "list",
          "cachedResultName": "Detalles",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1M1esCkbiCX780P_QnYXeH0z2wscqEMrZHssyquCmN6w/edit#gid=1781574660"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "NUMERO ORDEN": "={{ $json.numero }}",
            "CODIGO": "={{ $json.codigo }}",
            "DESCRIPCION": "={{ $json.descripcion }}",
            "PRESENTACION": "={{ $json.presentacion }}",
            "CANTIDAD": "={{ $json.cantidad }}",
            "VALOR UNITARIO": "={{ $json.valor_unitario }}",
            "TOTAL": "={{ $json.valor_total }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "NUMERO ORDEN",
              "displayName": "NUMERO ORDEN",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CODIGO",
              "displayName": "CODIGO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DESCRIPCION",
              "displayName": "DESCRIPCION",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "PRESENTACION",
              "displayName": "PRESENTACION",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CANTIDAD",
              "displayName": "CANTIDAD",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "VALOR UNITARIO",
              "displayName": "VALOR UNITARIO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "TOTAL",
              "displayName": "TOTAL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -112,
        288
      ],
      "id": "e9b9baba-d33c-4ccc-8c69-c3d1e1960a54",
      "name": "Agrega datos detalle",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "RvVuNbRhT0ldXZby",
          "name": "Google Sheets SGTECH"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1M1esCkbiCX780P_QnYXeH0z2wscqEMrZHssyquCmN6w",
          "mode": "list",
          "cachedResultName": "RESULTADOS_EXTRACCION",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1M1esCkbiCX780P_QnYXeH0z2wscqEMrZHssyquCmN6w/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Encabezados",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1M1esCkbiCX780P_QnYXeH0z2wscqEMrZHssyquCmN6w/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "NUMERO ORDEN": "={{ $json.numero }}",
            "FECHA ORDEN": "={{ $json.fecha_orden }}",
            "FECHA ENTREGA": "={{ $json.fecha_entrega }}",
            "PLAZO PAGO": "={{ $json.plazo_pago }}",
            "NOMBRE CLIENTE": "={{ $json.proveedor_nombre }}",
            "DIRECCION CLIENTE": "={{ $json.direccion }}",
            "CIUDAD CLIENTE": "={{ $json.ciudad }}",
            "NIT CLIENTE": "={{ $json.proveedor_nit }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "NUMERO ORDEN",
              "displayName": "NUMERO ORDEN",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "FECHA ORDEN",
              "displayName": "FECHA ORDEN",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "FECHA ENTREGA",
              "displayName": "FECHA ENTREGA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PLAZO PAGO",
              "displayName": "PLAZO PAGO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "NOMBRE CLIENTE",
              "displayName": "NOMBRE CLIENTE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "DIRECCION CLIENTE",
              "displayName": "DIRECCION CLIENTE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CIUDAD CLIENTE",
              "displayName": "CIUDAD CLIENTE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "NIT CLIENTE",
              "displayName": "NIT CLIENTE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -112,
        128
      ],
      "id": "e8e54dbe-976d-4316-b7ed-128b7905eced",
      "name": "Agrega datos encabezados",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "RvVuNbRhT0ldXZby",
          "name": "Google Sheets SGTECH"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Recoger todos los correos procesados\nconst entradas = $input.all();\nconst out = [];\n\nfor (const entrada of entradas) {\n  const datos = entrada.json;\n\n  const orden = datos.orden_compra || {};\n  const items = Array.isArray(datos.items) ? datos.items : [];\n\n  // 👇 Solo procesar si existe numero y no está vacío\n  if (orden.numero && orden.numero.toString().trim() !== \"\") {\n    for (const item of items) {\n      out.push({\n        json: {\n          tipo: \"item\",\n          numero: orden.numero,\n          codigo: item.codigo_producto || \"\",\n          descripcion: item.descripcion || \"\",\n          presentacion: item.presentacion || \"\",\n          cantidad: item.cantidad || \"\",\n          valor_unitario: item.precio_unitario || \"\",\n          valor_total: item.subtotal || \"\"\n        }\n      });\n    }\n  }\n}\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -272,
        288
      ],
      "id": "020d4c3b-4deb-440a-870c-681fde92f09f",
      "name": "Organiza productos"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const orden = $json.orden_compra || {};\nconst messageId = $json.messageId || \"\";\n\n// Si no tiene número, retornar null para que n8n lo omita\nif (!orden.numero || orden.numero.trim() === \"\") {\n  console.log(`❌ Filtrado: Orden sin número - MessageId: ${messageId}`);\n  return null; // n8n omitirá este item automáticamente\n}\n\nreturn {\n  json: {\n    tipo: \"orden\",\n    numero: orden.numero,\n    fecha_orden: orden.fecha_orden || \"\",\n    fecha_entrega: orden.fecha_entrega || \"\",\n    forma_pago: orden.forma_pago || \"\",\n    plazo_pago: orden.plazo_pago || \"\",\n    proveedor_nombre: orden.nombre_empresa || \"\",\n    proveedor_nit: orden.nit_comprador || \"\",\n    direccion: orden.direccion_cliente || \"\",\n    ciudad: orden.ciudad_comprador || \"\",\n    messageId: messageId\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -272,
        128
      ],
      "id": "3156f8db-d99c-4291-ab19-2fbdf39a322e",
      "name": "Organiza Encabezados"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "79445ead-001a-4e37-8554-11d10cb2b9e5",
              "leftValue": "={{ $json.pdfCount }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "90a35f5d-515a-436a-8337-e655e884cdb0",
              "leftValue": "={{ $json.imgCount }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1696,
        384
      ],
      "id": "0c5daf6d-0f10-457d-b3e1-e6ed80e3c544",
      "name": "Valida PDF"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const b = $binary || {};\nlet pdfCount = 0;\nlet imgCount = 0;\nlet fileType = \"\";\n\nfor (const [, bin] of Object.entries(b)) {\n  const ext = (bin.fileExtension || '').toLowerCase();\n  const mt  = (bin.mimeType || '').toLowerCase();\n\n  // Detectar PDF\n  if (ext === 'pdf' || mt.includes('application/pdf')) {\n    pdfCount++;\n    fileType = \"pdf\";\n  }\n\n  // Detectar solo imágenes JPG o JPEG (sin PNG)\n  else if (\n    ['jpg', 'jpeg'].includes(ext) ||\n    mt.includes('image/jpeg')\n  ) {\n    imgCount++;\n    fileType = \"image\";\n  }\n}\n\n// Si hay varios archivos, prioriza PDF sobre imagen\nif (pdfCount > 0) fileType = \"pdf\";\nelse if (imgCount > 0) fileType = \"image\";\n\nreturn {\n  json: {\n    messageId: $json.id,\n    pdfCount,\n    imgCount,\n    fileType\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1856,
        320
      ],
      "id": "d95d4334-9e60-435b-852e-8d91018b0251",
      "name": "Conteo PDF"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Recibes el texto completo de la IA\nconst textoIA = $json.content?.parts?.[0]?.text || $json.text || \"\";\n\n// Limpiar el texto - múltiples estrategias\nlet jsonString = textoIA;\n\n// Estrategia 1: Remover los backticks y la palabra 'json'\njsonString = jsonString\n  .replace(/```json/g, '')    \n  .replace(/```/g, '')        \n  .trim();\n\n// Estrategia 2: Si todavía tiene contenido no JSON, extraer solo el JSON\nif (jsonString.includes('{') && jsonString.includes('}')) {\n  const inicio = jsonString.indexOf('{');\n  const fin = jsonString.lastIndexOf('}') + 1;\n  jsonString = jsonString.substring(inicio, fin);\n}\n\n// Estrategia 3: Limpiar saltos de línea y espacios extras\njsonString = jsonString\n  .replace(/\\n/g, ' ')        \n  .replace(/\\s+/g, ' ')       \n  .trim();\n\n// Debug\nconsole.log('Texto limpio:', jsonString);\n\n// Parsear a objeto JavaScript\nlet datosExtraidos;\ntry {\n  datosExtraidos = JSON.parse(jsonString);\n  console.log('✅ JSON parseado correctamente');\n} catch (error) {\n  try {\n    const jsonMatch = textoIA.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      jsonString = jsonMatch[0];\n      datosExtraidos = JSON.parse(jsonString);\n      console.log('✅ JSON parseado con limpieza agresiva');\n    } else {\n      throw new Error('No se pudo encontrar JSON en el texto');\n    }\n  } catch (error2) {\n    throw new Error(`Error parseando JSON de IA: ${error2.message}. Texto: ${textoIA.substring(0, 200)}...`);\n  }\n}\n\n// Verificar datos\nif (!datosExtraidos || typeof datosExtraidos !== 'object') {\n  throw new Error('JSON de IA está vacío o es inválido');\n}\n\nconsole.log(`✅ Extraídos ${Object.keys(datosExtraidos).length} campos`);\n\nreturn { \n  json: { \n    ...datosExtraidos,   // 👈 EXPANDE directo el objeto (sin wrapper)\n    originalText: textoIA, \n    cleanedText: jsonString,\n    messageId: $json.messageId || \"\"  // ← ESTA LÍNEA ES CRUCIAL\n  } \n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -432,
        208
      ],
      "id": "3d604308-7531-4db8-ab26-ace823f5f4eb",
      "name": "Transf. Data",
      "notesInFlow": true,
      "notes": "Transforma los resultados entregados por la IA a un formato JSON correcto."
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "localhost:5678",
            "connection": "keep-alive",
            "content-length": "43",
            "sec-ch-ua-platform": "\"Windows\"",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
            "sec-ch-ua": "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"",
            "content-type": "application/json",
            "sec-ch-ua-mobile": "?0",
            "accept": "*/*",
            "origin": "null",
            "sec-fetch-site": "cross-site",
            "sec-fetch-mode": "cors",
            "sec-fetch-dest": "empty",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "es,en-US;q=0.9,en;q=0.8,ru;q=0.7"
          },
          "params": {},
          "query": {},
          "body": {
            "force": true,
            "origin": "launcher"
          },
          "webhookUrl": "http://localhost:5678/webhook/4999f552-dbe4-46cb-9df4-f9d9e12e8ebc",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Captura Correos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Insert row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Move a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Captura Correos": {
      "main": [
        [
          {
            "node": "Organización Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move a message": {
      "main": [
        []
      ]
    },
    "Organización Info": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IA Extracción Texto": {
      "main": [
        [
          {
            "node": "Transf Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transf Info": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert row": {
      "main": [
        [
          {
            "node": "Move a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move a message1": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "IA Extracción Texto",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conv. Binario": {
      "main": [
        [
          {
            "node": "Analyze 2.5 flash",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze 2.5 flash": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extrae info OC": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Conv. Binario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Transf. Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agrupa Data": {
      "main": [
        [
          {
            "node": "Organiza salida",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conv. Binario1": {
      "main": [
        [
          {
            "node": "Extrae info OC",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agrega datos detalle": {
      "main": [
        [
          {
            "node": "Agrupa Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Agrega datos encabezados": {
      "main": [
        [
          {
            "node": "Agrupa Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza productos": {
      "main": [
        [
          {
            "node": "Agrega datos detalle",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza Encabezados": {
      "main": [
        [
          {
            "node": "Agrega datos encabezados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transf. Data": {
      "main": [
        [
          {
            "node": "Organiza productos",
            "type": "main",
            "index": 0
          },
          {
            "node": "Organiza Encabezados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c90a7162-ab56-4b50-98c7-6c5be0624867",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "64131b8660a0fc101c49c977e6d21c2e33ebb5bea307b2b26c6b5d01965f154b"
  },
  "id": "1H4ksoWntU9LHS38",
  "tags": []
}